<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add Product</title>

         <!-- Boostrap -->
         <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

    <link rel="stylesheet" href="/css/admin/addproduct.css">

    <!----===== Boxicons CSS ===== -->
    <link href='https://unpkg.com/boxicons@2.1.1/css/boxicons.min.css' rel='stylesheet'>
    <!-- Cropperjs -->
    <link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet"/>
    <style>
            .highlight {
        background-color: #695cfe;
        border-radius: 6px;
      }
      .highlight a i,
      .highlight a span {
        color: white !important;
      }
      .preview-item {
      display: inline-block;
      margin: 10px;
    }

    .preview-image {
      width: 100px;
      height: 100px;
    }

    .delete-button {
      display: block;
      margin-top: 5px;
    }

    </style>
</head>
<body>

  <%- include('../includes/navigation.ejs') %>
    
      <section class="home">
        <div class="text">Add Product</div>
        <% if(errorMessage){ %>
        <h2 style="text-align: center;" class="errorMessage"><%= errorMessage %></h2>
        <% } %>
        <div class="form-div">
            <form action="/admin/add-product" method="post" enctype="multipart/form-data">
            <div class="form-group">
              <label for="product_name">Name</label>
              <input type="text" class="form-control" id="product_name" placeholder="Enter Product Name" name="product_name" required>
            </div>
            <div class="form-group">
              <label for="product_price">Price</label>
              <input type="number" class="form-control" id="product_price" placeholder="Enter the price of product" name="product_price" required>
            </div>
            <div class="form-group">
              <label for="exampleFormControlSelect1">Select Category</label>
              <select class="form-control" id="exampleFormControlSelect1" name="product_category">
                <!-- <option class="placeholder" selected disabled>Select a category</option> -->
                <% categories.forEach((category)=> {%>
                <option><%=category.name %></option>
                <% }) %>
              </select>
            </div>
            <div class="form-group">
              <label for="product_brand">Brand</label>
              <input type="text" class="form-control" id="product_brand" placeholder="Enter Product Brand" name="product_brand" required>
            </div>
            <div class="form-group">
                <label for="product_image">Image</label>
                <input type="file" class="form-control" id="product_image" placeholder="Select The Files" name="product_image" accept=".jpg, .png, .jpeg" multiple >
            </div>
            <!-- IMAGE  PREVIEW BEGIN -->
            <div id="previewContainer">
              
            </div>
            <!-- IMAGE  PREVIEW END -->
            <div class="form-group">
                <label for="product_stock">Stock</label>
                <input type="number" class="form-control" id="product_stock" placeholder="Enter Stock" name="product_stock" required>
            </div>
            <div class="form-group">
              <label for="product_description">Description</label>
              <textarea class="form-control" id="product_description" rows="3" name="product_description" required></textarea>
            </div>
            <button class="btn btn-primary" type="submit">Submit form</button>
          </form>
        </div>

      </section>

      <!-- Crop Modal-->
      <div id="cropperModal" class="modal" tabindex="-1">
        <div class="modal-dialog modal-lg">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Crop Image</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="img-container">
                <img id="cropperImage" src="" alt="Image to crop">
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Bootstrap -->
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
      <!-- Cropperjs -->
      <script src="https://unpkg.com/cropperjs"></script>
      <script>
        setTimeout(()=>{document.querySelector(".errorMessage").innerHTML=""},8000)

        /* Script For Deleting the Selected Images BEGIN  */
        
        let cropper;
        let currentPreviewImage;
        let currentFileIndex;
        const previewContainer = document.getElementById('previewContainer');
        const cropperModal = new bootstrap.Modal(document.getElementById('cropperModal'), {
          backdrop: 'static',
          keyboard: false
        });
        const cropperImage = document.getElementById('cropperImage');
        const cropButton = document.getElementById('cropButton');

        document.getElementById("product_image").addEventListener('change', function(event) {
          const files = event.target.files; // Get the selected files
          previewContainer.innerHTML = ''; // Clear previous previews
    
          // Loop through each selected file
          for (let i = 0; i < files.length; i++) {
            const file = files[i];
            const reader = new FileReader(); // Create a FileReader object
            
            reader.onload = function(e) {
              // Create preview elements
              const previewElement = document.createElement('div');
              previewElement.classList.add('preview-item');
              
              const imageElement = document.createElement('img');
              imageElement.classList.add('preview-image');
              imageElement.src = e.target.result;
              previewElement.appendChild(imageElement);
              
              const deleteButton = document.createElement('button');
              deleteButton.classList.add('delete-button');
              deleteButton.textContent = 'Delete';
              deleteButton.addEventListener('click', function() {
                
                previewContainer.removeChild(previewElement); // Remove preview when delete button is clicked
                // Remove the corresponding file from the input's selection
                const fileInput = document.getElementById('product_image');
                const newFiles = Array.from(fileInput.files).filter(f => f !== file); // Filter out the deleted file
                fileInput.value = ''; // Clear the input value
                const newFileList = new DataTransfer(); // Create a new DataTransfer object
                newFiles.forEach(f => newFileList.items.add(f)); // Add the remaining files to the new DataTransfer object
                fileInput.files = newFileList.files; // Assign the new DataTransfer object back to the file input
              });
              previewElement.appendChild(deleteButton);
        
              // Append preview to container
              previewContainer.appendChild(previewElement);

              // Add event listener to open Cropper.js when clicking on the image
              imageElement.addEventListener('click', function() {
                if (cropper) {
                  cropper.destroy();
                }
                cropperImage.src = e.target.result;
                currentPreviewImage = imageElement;
                currentFileIndex = i; // Track the index of the current file being cropped
                cropper = new Cropper(cropperImage, {   
                  viewMode: 1,
                  responsive: true,
                  movable: true, // Enable moving
                  scalable: true, // Enable scaling
                  zoomable: true, // Enable zooming
                  rotatable: true, // Enable rotation
                  responsive: true, // Adjust to window size
                });
                cropperModal.show();
              });
            };

            // Read the selected file as a data URL
            reader.readAsDataURL(file);
          }
        });

  cropButton.addEventListener('click', function() {

    const canvas = cropper.getCroppedCanvas();

    canvas.toBlob(function(blob) {
      const url = URL.createObjectURL(blob);
  
      // Update the preview image
      currentPreviewImage.src = url;
      // Update the file input
      const fileInput = document.getElementById('product_image');
      const dataTransfer = new DataTransfer();
      Array.from(fileInput.files).forEach((file, index) => {
          if (index === currentFileIndex) {
            dataTransfer.items.add(new File([blob], file.name, {type: 'image/jpeg'}));
          } else {
            dataTransfer.items.add(file);
          }
        });
      fileInput.files = dataTransfer.files;
      
      cropper.destroy();
      cropperModal.hide();
    }, 'image/jpeg');
  });



      </script>

      <script>
        const body = document.querySelector('body'),
          sidebar = body.querySelector('nav'),
          toggle = body.querySelector(".toggle"),
          searchBtn = body.querySelector(".search-box"),
          modeSwitch = body.querySelector(".toggle-switch"),
          modeText = body.querySelector(".mode-text");
        toggle.addEventListener("click", () => {
          sidebar.classList.toggle("close");
        })
        searchBtn.addEventListener("click", () => {
          sidebar.classList.remove("close");
        })
        modeSwitch.addEventListener("click", () => {
          body.classList.toggle("dark");
          if (body.classList.contains("dark")) {
            modeText.innerText = "Light mode";
          } else {
            modeText.innerText = "Dark mode";
          }
        });
      </script>

    
</body>
</html>